name: deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }}
  SYSTEM_NAME: example
  SERVICE_NAME: foobar

jobs:
  deploy:
    name: Deloy app to AWS Fargate
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Set env vars for prod
        if: github.ref == 'refs/heads/main'
        run: echo "ENV_NAME=prod" >> $GITHUB_ENV

      - name: Set env vars for dev
        if: github.ref == 'refs/heads/develop'
        run: echo "ENV_NAME=dev" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build and Start Docker Containers
        run: docker-compose up -d --build app web

      - name: Cache Composer Dependencies
        id: cache-composer
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-v1-${{ hashFiles('backend/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-v1-

      - name: Install Composer Dependencies
        run: docker-compose exec -T app composer install -n --prefer-dist --no-progress --no-dev
        if: steps.cache-composer.outputs.cache-hit != 'true'

      - name: Cache NPM Dependencies
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-npm-v1-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-v1-

      - name: Install NPM Dependencies
        run: docker-compose exec -T web npm ci
        if: steps.cache-npm.outputs.cache-hit != 'true'

      - name: Build NPM Dependencies
        run: |
          docker-compose exec -T web npm run production

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_DEPLOYER_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1800

      - name: Login to Amazon ECR
        id: amazon-ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, tag, and push nginx image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-nginx
        run: |
          docker build \
          --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
                                                            -f infra/docker/nginx/Dockerfile \
                                                            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                                                            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push php image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-php
        run: |
          docker build \
          --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
                                                            -f infra/docker/php/Dockerfile \
                                                            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                                                            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install ecspresso
        uses: kayac/ecspresso@v2
        with:
          version: v2.2.4

      - name: Deploy to AWS Fargate
        run: ecspresso deploy --config config_$ENV_NAME.yml
        working-directory: ./ecspresso
