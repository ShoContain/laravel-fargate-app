name: build_and_push

on:
  push:
    branches:
      - main
      - develop

env:
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }}
  SYSTEM_NAME: example
  SERVICE_NAME: foobar

jobs:
  build-and-push:
    name: Build And Push
    runs-on: ubuntu-latest
    steps:
      - name: Set env vars for prod
        if: github.ref == 'refs/heads/main'
        run: echo "ENV=prod" >> $GITHUB_ENV

      - name: Set env vars for dev
        if: github.ref == 'refs/heads/develop'
        run: echo "ENV=dev" >> $GITHUB_ENV

      - name: Configure AWS credentials for prod
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      - name: Configure AWS credentials for dev
        if: github.ref == 'refs/heads/develop'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.DEV_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      - uses: actions/checkout@v4

      - run: docker compose up -d --build app web

      - name: Cache Composer
        id: cache-composer
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-v1-${{ hashFiles('backend/composer.lock') }}

      - name: Install composer dependencies
        if: steps.cache-composer.outputs.cache-hit != 'true'
        run: docker compose exec -T app composer install -n --no-dev --prefer-dist --no-progress

      - name: Cache NPM
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-npm-v1-${{ hashFiles('backend/package-lock.json') }}

      - name: Install npm dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: docker compose exec -T web npm ci

      - run: docker compose exec -T web npm run production

      - name: Login to ECR
        id: amazon-ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push nginx image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV }}-${{ env.SERVICE_NAME }}-nginx
          DOCKER_BUILDKIT: 1
        run: |
          docker build \
          -cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
          -f infra/docker/nginx/Dockerfile \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
